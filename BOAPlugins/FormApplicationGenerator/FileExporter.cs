using System;
using System.IO;
using System.Linq;
using BOA.Common.Helpers;
using BOAPlugins.ExportingModel;

namespace BOAPlugins.FormApplicationGenerator
{
    class FileExporter
    {
        #region Constructors
        public FileExporter(Model model)
        {
            Model = model;
        }
        #endregion

        #region Properties
        Model Model { get; }
        #endregion

        #region Public Methods
        public void ExportFiles()
        {
            var typesFolder      = Model.TypesProjectFolder;
            var orchFolder       = Path.GetDirectoryName(Model.SolutionFilePath) + Path.DirectorySeparatorChar + Model.NamespaceNameForOrch + Path.DirectorySeparatorChar;
            var oneProjectFolder = GetOneProjectFolder(Model.SolutionFilePath, Model.NamespaceName);

            Util.WriteFileIfContentNotEqual(typesFolder + Model.FormName + "ListForm.cs", TypeFileForListForm.GenerateCode(Model));
            Util.WriteFileIfContentNotEqual(typesFolder + Model.FormName + "Form.cs", TypeFileForDefinitionForm.GenerateCode(Model));

            Util.WriteFileIfContentNotEqual(orchFolder + Model.FormName + "ListForm.cs", OrchFileForListForm.GenerateCode(Model));
            Util.WriteFileIfContentNotEqual(orchFolder + Model.FormName + "Form.cs", OrchFileForDefinitionForm.GenerateCode(Model));

            Util.WriteFileIfContentNotEqual(oneProjectFolder + @"ClientApp\pages\" + Model.FormName + "ListForm.tsx", ListFormTsxFile.GenerateCode(Model));
            Util.WriteFileIfContentNotEqual(oneProjectFolder + @"ClientApp\pages\" + Model.FormName + "Form.tsx", DefinitionFormTsxFile.GenerateCode(Model));

            var autoGeneratedConfigFilePath = oneProjectFolder + @"ClientApp\models\AutoGeneratedModelsConfig.json";

            UpdateAutoGeneratedModelsConfig(autoGeneratedConfigFilePath);
        }

        public string HasError()
        {
            if (string.IsNullOrWhiteSpace(Model.FormName))
            {
                return CannotBeEmpty(Label.FormName);
            }

            return null;
        }
        #endregion

        #region Methods
        static string CannotBeEmpty(string labelName)
        {
            return labelName + " can not be empty";
        }

        static string GetOneProjectFolder(string solutionFilePath, string namespaceName)
        {
            var paths = new[]
            {
                Path.GetDirectoryName(solutionFilePath) + Path.DirectorySeparatorChar + @"One\BOA.One.Office." + namespaceName + Path.DirectorySeparatorChar,
                Path.GetDirectoryName(solutionFilePath) + Path.DirectorySeparatorChar + @"One\BOA.One." + namespaceName + Path.DirectorySeparatorChar
            };

            foreach (var path in paths)
            {
                if (Directory.Exists(path))
                {
                    return path;
                }
            }

            throw new InvalidOperationException("One project folder not found." + string.Join(Environment.NewLine, paths));
        }

        void UpdateAutoGeneratedModelsConfig(string autoGeneratedConfigFilePath)
        {
            var config = JsonHelper.Deserialize<ExportContract>(File.ReadAllText(autoGeneratedConfigFilePath));

            var assemblyName = Model.NamespaceNameForType + ".dll";
            var exportInfo   = config.ExportInfoList.FirstOrDefault(x => x.Assembly == assemblyName);
            if (exportInfo == null)
            {
                exportInfo = new ExportInfo
                {
                    Assembly = assemblyName
                };

                config.ExportInfoList.Add(exportInfo);
            }

            var ns = Model.NamespaceNameForType;

            exportInfo.ExportClassNames.Add(ns + "." + Model.DefinitionFormDataClassName);
            exportInfo.ExportClassNames.Add(ns + "." + Model.FormName + "FormState");
            exportInfo.ExportClassNames.Add(ns + "." + Model.FormName + "FormDataSource");
            exportInfo.ExportClassNames.Add(ns + "." + Model.FormName + "FormRequest");

            exportInfo.ExportClassNames.Add(ns + "." + Model.FormName + "ListFormState");
            exportInfo.ExportClassNames.Add(ns + "." + Model.FormName + "ListFormDataSource");
            exportInfo.ExportClassNames.Add(ns + "." + Model.FormName + "ListFormRequest");
            exportInfo.ExportClassNames.Add(ns + "." + Model.FormName + "ListFormData");

            Util.WriteFileIfContentNotEqual(autoGeneratedConfigFilePath, JsonHelper.Serialize(config));
        }
        #endregion
    }
}